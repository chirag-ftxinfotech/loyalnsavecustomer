//FONTS

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: block;
  }
}


@mixin placeholder-text($color){
	&::-webkit-input-placeholder {
	   color: $color; opacity: 1;
	}
	&:-moz-placeholder { /* Firefox 18- */
	color: $color; opacity: 1;
	}
	&::-moz-placeholder {  /* Firefox 19+ */
	   color: $color; opacity: 1;
	}
	&:-ms-input-placeholder {  
	   color: $color; opacity: 1;
	}
}

$grid-bp: (
       xs: 0,
       sm: 576px,
       md: 768px,
       lg: 992px,
       xl: 1200px,
	   xxl: 1400px,
	   xxxl: 1600px,
 ) !default;

@mixin media($breakpoint) {
    @if $breakpoint == xs {
		@media( max-width: map-get($grid-bp , sm) - 1px ) { @content };
	}
	@if $breakpoint == sm {
		@media( max-width: map-get($grid-bp , md) - 1px ) { @content };
	}	
	@if $breakpoint == md {
		@media( max-width: map-get($grid-bp , lg) - 1px ) { @content };
	}
	@if $breakpoint == lg {
		@media( max-width: map-get($grid-bp , xl) - 1px ) { @content };
	}
	@if $breakpoint == xl {
		@media( max-width: map-get($grid-bp , xxl) - 1px ) { @content };
	}
	@if $breakpoint == xxl {
		@media( max-width: map-get($grid-bp , xxxl) - 1px ) { @content };
	}
}


@mixin media_min($breakpoint) {
	@if $breakpoint == sm {
		@media( min-width: map-get($grid-breakpoints , sm) ) { @content };
	}	
	@if $breakpoint == md {
		@media( min-width: map-get($grid-breakpoints , md) ) { @content };
	}
	@if $breakpoint == lg {
		@media( min-width: map-get($grid-breakpoints , lg) ) { @content };
	}
	@if $breakpoint == xl {
		@media( min-width: map-get($grid-breakpoints , xl) ) { @content };
	}
	@if $breakpoint == xxl {
		@media( min-width: map-get($grid-bp , xxl) ) { @content };
	}
}

@mixin border-radius($r) {
  -webkit-border-radius: $r;
  border-radius: $r;
}

@mixin gradient($start, $end) {
  background: $start;
  background: -moz-linear-gradient(top,  $start 0%, $end 100%);
  background: -webkit-linear-gradient(top,  $start 0%,$end 100%);
  background: linear-gradient(to bottom,  $start 0%,$end 100%);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start', endColorstr='$end',GradientType=0 );
}

@mixin gradientv($start, $end) {
	background: $start;
    background: -moz-linear-gradient(left,  $start 0%, $end 100%);
    background: -webkit-linear-gradient(left,  $start 0%,$end 100%);
    background: linear-gradient(to right,  $start 0%,$end 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start', endColorstr='$end',GradientType=1 );
}

@mixin animateEaseIn($time) {
	-webkit-transition: all $time ease-in-out;
	transition: all $time ease-in-out;
}

// New CSS start
// --------------------------------------------------
// Flexbox SASS mixins
// --------------------------------------------------

// Flexbox display
@mixin flexbox {
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
  }
  
  // Inline flex display
  @mixin inline-flex {
	display: -webkit-inline-box;
	display: -moz-inline-box;
	display: -webkit-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
  }
  
  // The 'flex' shorthand
  // - applies to: flex items
  // <positive-number>, initial, auto, or none
  @mixin flex($fg: 1, $fs: 0, $fb: auto) {
  
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;
  
	// Box-Flex only supports a flex-grow value so lets grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
	  $fg-boxflex: nth($fg, 1);
	}
  
	 -webkit-box: $fg-boxflex;
		-moz-box: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
		-ms-flex: $fg $fs $fb;
			flex: $fg $fs $fb;
  }
  
  // Flex Flow Direction
  // - applies to: flex containers
  // row (default) | row-reverse | column | column-reverse
  @mixin flex-direction($direction: row) {
	@if $direction == row-reverse {
	  -webkit-box-direction: reverse;
	  -webkit-box-orient: horizontal;
		 -moz-box-direction: reverse;
		 -moz-box-orient: horizontal;
	} @else if $direction == column {
	  -webkit-box-direction: normal;
	   -webkit-box-orient: vertical;
		 -moz-box-direction: normal;
		  -moz-box-orient: vertical;
	} @else if $direction == column-reverse {
	  -webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
		 -moz-box-direction: reverse;
		   -moz-box-orient: vertical;
	} @else {
	   -webkit-box-direction: normal;
	  -webkit-box-orient: horizontal;
		  -moz-box-direction: normal;
		 -moz-box-orient: horizontal;
	}
	-webkit-flex-direction: $direction;
		-ms-flex-direction: $direction;
			flex-direction: $direction;
  }
  
  // Flex Line Wrapping
  // - applies to: flex containers
  // nowrap | wrap | wrap-reverse
  @mixin flex-wrap($value: nowrap) {
	// No Webkit/FF Box fallback.
	-webkit-flex-wrap: $value;
	@if $value == nowrap {
	  -ms-flex-wrap: none;
	} @else {
	  -ms-flex-wrap: $value;
	}
	flex-wrap: $value;
  }
  
  // Flex Direction and Wrap
  // - applies to: flex containers
  // <flex-direction> || <flex-wrap>
  @mixin flex-flow($values: (row nowrap)) {
	// No Webkit/FF Box fallback.
	-webkit-flex-flow: $values;
		-ms-flex-flow: $values;
			flex-flow: $values;
  }
  
  // Display Order
  // - applies to: flex items
  // <integer>
  @mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	   -moz-box-ordinal-group: $int + 1;
				-webkit-order: $int;
			   -ms-flex-order: $int;
						order: $int;
  }
  
  // Flex grow factor
  // - applies to: flex items
  // <number>
  @mixin flex-grow($int: 1) {
	 -webkit-box-flex: $int;
		-moz-box-flex: $int;
	-webkit-flex-grow: $int;
			 -ms-flex: $int;
			flex-grow: $int;
  }
  
  // Flex shrink
  // - applies to: flex item shrink factor
  // <number> 
  @mixin flex-shrink($int: 0) {
	-webkit-flex-shrink: $int;
	   -moz-flex-shrink: $int;
			   -ms-flex: $int;
			flex-shrink: $int;
  }
  
  // Flex basis
  // - the initial main size of the flex item
  // - applies to: flex itemsnitial main size of the flex item
  // <width> 
  @mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
			flex-basis: $value;
  }
  
  // Axis Alignment
  // - applies to: flex containers
  // flex-start | flex-end | center | space-between | space-around 
  @mixin justify-content($value: flex-start) {
	@if $value == flex-start {
	  -webkit-box-pack: start;
		 -moz-box-pack: start;
		 -ms-flex-pack: start;
	} @else if $value == flex-end {
	  -webkit-box-pack: end;
		 -moz-box-pack: end;
		 -ms-flex-pack: end;
	} @else if $value == space-between {
	  -webkit-box-pack: justify;
		 -moz-box-pack: justify;
		 -ms-flex-pack: justify;
	} @else if $value == space-around {
		 -ms-flex-pack: distribute;
	} @else {
	  -webkit-box-pack: $value;
		 -moz-box-pack: $value;
		 -ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
			justify-content: $value;
  }
  
  // Packing Flex Lines
  // - applies to: multi-line flex containers
  // flex-start | flex-end | center | space-between | space-around | stretch 
  @mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	@if $value == flex-start {
	  -ms-flex-line-pack: start;
	} @else if $value == flex-end {
	  -ms-flex-line-pack: end;
	} @else {
	  -ms-flex-line-pack: $value;
	}
	align-content: $value;
  }
  
  // Cross-axis Alignment
  // - applies to: flex containers
  // flex-start | flex-end | center | baseline | stretch 
  @mixin align-items($value: stretch) {
	@if $value == flex-start {
	  -webkit-box-align: start;
		 -moz-box-align: start;
		 -ms-flex-align: start;
	} @else if $value == flex-end {
	  -webkit-box-align: end;
		 -moz-box-align: end;
		 -ms-flex-align: end;
	} @else {
	  -webkit-box-align: $value;
		 -moz-box-align: $value;
		 -ms-flex-align: $value;
	}
	-webkit-align-items: $value;
			align-items: $value;
  }
  
  // Cross-axis Alignment
  // - applies to: flex items
  // auto | flex-start | flex-end | center | baseline | stretch 
  @mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	@if $value == flex-start {
	  -ms-flex-item-align: start;
	} @else if $value == flex-end {
	  -ms-flex-item-align: end;
	} @else {
	  -ms-flex-item-align: $value;
	}
	align-self: $value;
  }
// New CSS end